---
name: Deployment lifecycle

on: ['deployment']

jobs:
  destroy-environment:
    if: github.event.deployment.task == 'destroy-environment'
    runs-on: ubuntu-latest
    steps:
      - name: Update deployment status (in-progress)
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "in_progress"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

      - name: Destroy environment
        run: terraform destroy -auto-approve
          -var horreum_image_tag=${{ github.event.deployment.payload.env.horreum-image-tag }}
          terraform/aws/environments/stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  destroy-status-update:
    if: github.event.deployment.task == 'destroy-environment'
    needs: [destroy-environment]
    runs-on: ubuntu-latest
    steps:
      - name: Update deployment status (inactive)
        if: needs.destroy-environment.result == 'success'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "inactive"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

      - name: Update Slack message with status (success)
        if: needs.destroy-environment.result == 'success'
        uses: fjogeleit/http-request-action@v1.4.1
        with:
          url: "${{ secrets.SLACK_BOT_STATUS_UPDATE_URL }}"
          method: POST
          data: '{"deploymentResult": "success", "msgId": "${{ github.event.deployment.payload.msg_ts }}"}'

      - name: Update deployment status (error)
        if: needs.destroy-environment.result == 'failure'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "error"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

      - name: Update Slack message with status (fail)
        if: needs.destroy-environment.result == 'failure'
        uses: fjogeleit/http-request-action@v1.4.1
        with:
          url: "${{ secrets.SLACK_BOT_STATUS_UPDATE_URL }}"
          method: POST
          data: '{"deploymentResult": "fail", "msgId": "${{ github.event.deployment.payload.msg_ts }}"}'

  deploy-environment:
    if: github.event.deployment.task == 'deploy-environment'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init terraform/aws/environments/stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Prepare terraform.tfvars
        run: |
          echo horreum_image_tag=\"${{ github.event.deployment.payload.env.horreum-image-tag }}\" > terraform.tfvars

      # - name: Update deployment status (in-progress)
      #   uses: chrnorm/deployment-status@releases/v1
      #   with:
      #     token: "${{ github.token }}"
      #     state: "in_progress"
      #     deployment_id: ${{ github.event.deployment.id }}
      #     description: ${{ github.event.deployment.description }}

      - name: Plan environment
        run: terraform plan terraform/aws/environments/stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-status-update:
    if: github.event.deployment.task == 'deploy-environment'
    needs: [deploy-environment]
    runs-on: ubuntu-latest
    steps:
      - name: Update deployment status (active)
        if: needs.deploy-environment.result == 'success'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "success"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

      - name: Update Slack message with status (success)
        if: needs.deploy-environment.result == 'success'
        uses: fjogeleit/http-request-action@v1.4.1
        with:
          url: "${{ secrets.SLACK_BOT_STATUS_UPDATE_URL }}"
          method: POST
          data: '{"deploymentResult": "success", "msgId": "${{ github.event.deployment.payload.msg_ts }}"}'

      - name: Update deployment status (error)
        if: needs.deploy-environment.result == 'failure'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "error"
          deployment_id: ${{ github.event.deployment.id }}
          description: ${{ github.event.deployment.description }}

      - name: Update Slack message with status (fail)
        if: needs.deploy-environment.result == 'failure'
        uses: fjogeleit/http-request-action@v1.4.1
        with:
          url: "${{ secrets.SLACK_BOT_STATUS_UPDATE_URL }}"
          method: POST
          data: '{"deploymentResult": "fail", "msgId": "${{ github.event.deployment.payload.msg_ts }}"}'



#
#      - name: Destroy staging environment
#        if: github.event.deployment.payload.operation == 'destroy'
#        run: terraform destroy -auto-approve terraform/aws/environments/stage
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
